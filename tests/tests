#include <iostream>
#include <vector>
#include <unordered_map>
#include <string>
#include <cerrno>
#include <cstdlib>
#include <stdlib.h>
#include "../graph.hpp"
#include "../catch/catch.hpp"
using namespace std;


Graph* testBuildGraph() {
  Graph * graph(0);
  Node N;
  N.city = "Singapore";
  N.name = "SIN";
  N.latitude = 1.35019;
  N.longitude = 103.994003;
  graph->insertVertex(N);

  Node M;
  M.city = "Dubai";
  M.name = "DXB";
  M.latitude = 25.2527999878;
  M.longitude = 55.3643989563;
  graph->insertVertex(M);

  Node L;
  L.city = "Kuwait";
  L.name = "KWI";
  L.latitude = 29.226600646972656;
  L.longitude = 47.96889877319336;
  graph->insertVertex(L);

  graph->buildAdj();
  return graph;
}


// TEST_CASE("BFS", "[weight=2][part=1]") {
//   Graph g = testBuildGraph(); 
//   vector<string> bfs;
//   bfs = g.BFS("ORD", "ATL");
//   REQUIRE( bfs.begin()).compare("ORD") == 0);
// }

TEST_CASE("BFS size", "[weight=2][part=1]") {
  Graph* g = getTestGraph(); 
  //vector<string> bfs;
  g->BFS("SIN", "KWI");
  REQUIRE(bfs.size() == 3);
}
//TEST_CASE("Djikstra size", "[weight=2][part=1]") {
  //Graph g = getTestGraph(); 
  //vector<string> d;
  //d = g.dijkstra("ORD", "ATL");
  //REQUIRE(d.size() == 2);
//}
// TEST_CASE("Djikstra begin", "[weight=2][part=1]") {
//   Graph g = getTestGraph(); 
//   vector<string> l;
//   l = g.dijkstra("ORD", "ATL");
//   REQUIRE(l.begin().compare("ORD") == 0);
// }
//TEST_CASE("Landmark begin", "[weight=2][part=1]") {
  //Graph g = getTestGraph(); 
  //vector<string> l;
  //l = g.landmarkPath("ATL", "PEK", "UTI");
  //REQUIRE(l.size() == 3);
//}

